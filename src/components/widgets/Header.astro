---
import { getAsset } from '~/utils/permalinks';
import { SITE } from 'astrowind:config';

import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';

interface Link {
	text?: string;
	href?: string;
	ariaLabel?: string;
	icon?: string;
}

interface Action {
	variant: 'primary' | 'secondary';
	text: string;
	href: string;
	icon?: string;
}

interface NavLink {
	text?: string;
	href?: string;
	links?: Link[];
}

interface HeaderProps {
	links?: NavLink[];
	actions?: Action[];
	is sticky?: boolean;
	showToggleTheme?: boolean;
	showCallToAction?: boolean;
}

const {
	links = [],
	actions = [],
	isSticky = false,
	showToggleTheme = false,
	showCallToAction = false,
} = Astro.props;

const stickyClass = isSticky ? 'sticky top-0 z-40 flex-none w-full transition-all ease duration-200' : '';
---

<header
	id="sticky-header"
	class={`header ${stickyClass} ${
		showToggleTheme ? 'dark:bg-slate-900/75 bg-white/75' : ''
	}`}
>
	<div class="relative flex flex-wrap items-center justify-between h-16 px-3 mx-auto max-w-7xl">
		<div class="flex items-center">
			<a class="flex items-center" href="/">
				<img
					class="h-10 w-auto md:h-12"
					src={getAsset('/assets/images/earthject-logo.png')}
					alt="Earthject Logo"
				/>
			</a>
		</div>
		<nav
			class="items-center w-full md:w-auto hidden md:flex text-gray-900 dark:text-slate-200 h-screen md:h-auto"
			aria-label="Main navigation"
		>
			<ul class="flex flex-col md:flex-row md:self-center collapse w-full md:w-auto text-xl md:text-base">
				{
					links.map(({ text, href, links: dropdownLinks }) => (
						<li class={dropdownLinks?.length ? 'dropdown' : ''}>
							{dropdownLinks?.length ? (
								<>
									<button class="font-medium hover:text-blue-600 dark:hover:text-blue-600 px-4 py-3 flex items-center transition duration-150 ease-in-out">
										{text} <svg class="w-2.5 h-2.5 ml-2 rtl:ml-0 rtl:mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
											<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1l4 4 4-4"></path>
										</svg>
									</button>
									<ul class="dropdown-menu md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white md:dark:bg-slate-800 transition duration-150 ease-in-out left-0 top-full z-50 min-w-[200px] drop-shadow-xl">
										{dropdownLinks.map(({ text: dropdownText, href: dropdownHref, ariaLabel }) => (
											<li>
												<a
													class="font-medium hover:text-blue-600 dark:hover:text-blue-600 px-4 py-3 flex items-center transition duration-150 ease-in-out"
													href={dropdownHref}
													aria-label={ariaLabel}
												>
													{dropdownText}
												</a>
											</li>
										))}
									</ul>
								</>
							) : (
								<a
									class="font-medium hover:text-blue-600 dark:hover:text-blue-600 px-4 py-3 flex items-center transition duration-150 ease-in-out"
									href={href}
								>
									{text}
								</a>
							)}
						</li>
					))
				}
			</ul>
			{showCallToAction && actions?.length ? (
				<div class="md:self-center flex mt-3 md:mt-0 ml-0 md:ml-4">
					{actions.map((action) => (
						<a
							href={action.href}
							class={`btn ${
								action.variant === 'primary' ? 'btn-primary' : 'btn-secondary'
							} ${action.icon ? 'with-icon' : ''}`}
						>
							{action.text}
							{action.icon && (
								<Fragment set:html={`<svg class="w-5 h-5 ml-1.5 -mr-1.5" aria-hidden="true">${action.icon}</svg>`} />
							)}
						</a>
					))}
				</div>
			) : (
				''
			)}
		</nav>
		<div class="flex items-center justify-end">
			{showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}
			<ToggleMenu iconClass="w-5 h-5" />
		</div>
	</div>
</header>
<style>
	/* ... */
</style>
